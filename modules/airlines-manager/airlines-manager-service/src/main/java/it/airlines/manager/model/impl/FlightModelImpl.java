/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.airlines.manager.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import it.airlines.manager.model.Flight;
import it.airlines.manager.model.FlightModel;
import it.airlines.manager.model.FlightSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Flight service. Represents a row in the &quot;AM_Flight&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FlightModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlightImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FlightImpl
 * @generated
 */
@JSON(strict = true)
public class FlightModelImpl
	extends BaseModelImpl<Flight> implements FlightModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flight model instance should use the <code>Flight</code> interface instead.
	 */
	public static final String TABLE_NAME = "AM_Flight";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"flightId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"departureDate", Types.VARCHAR}, {"arrivalDate", Types.VARCHAR},
		{"departureTime", Types.VARCHAR}, {"arrivalTime", Types.VARCHAR},
		{"departureAirport", Types.VARCHAR}, {"arrivalAirport", Types.VARCHAR},
		{"availablePlaces", Types.VARCHAR}, {"totalPlaces", Types.VARCHAR},
		{"duration", Types.VARCHAR}, {"price", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flightId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("departureDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrivalDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departureTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrivalTime", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departureAirport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arrivalAirport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("availablePlaces", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalPlaces", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AM_Flight (uuid_ VARCHAR(75) null,flightId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,departureDate VARCHAR(75) null,arrivalDate VARCHAR(75) null,departureTime VARCHAR(75) null,arrivalTime VARCHAR(75) null,departureAirport VARCHAR(75) null,arrivalAirport VARCHAR(75) null,availablePlaces VARCHAR(75) null,totalPlaces VARCHAR(75) null,duration VARCHAR(75) null,price VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table AM_Flight";

	public static final String ORDER_BY_JPQL = " ORDER BY flight.flightId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AM_Flight.flightId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ARRIVALAIRPORT_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long DEPARTUREAIRPORT_COLUMN_BITMASK = 4L;

	public static final long DEPARTUREDATE_COLUMN_BITMASK = 8L;

	public static final long GROUPID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long FLIGHTID_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Flight toModel(FlightSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Flight model = new FlightImpl();

		model.setUuid(soapModel.getUuid());
		model.setFlightId(soapModel.getFlightId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDepartureDate(soapModel.getDepartureDate());
		model.setArrivalDate(soapModel.getArrivalDate());
		model.setDepartureTime(soapModel.getDepartureTime());
		model.setArrivalTime(soapModel.getArrivalTime());
		model.setDepartureAirport(soapModel.getDepartureAirport());
		model.setArrivalAirport(soapModel.getArrivalAirport());
		model.setAvailablePlaces(soapModel.getAvailablePlaces());
		model.setTotalPlaces(soapModel.getTotalPlaces());
		model.setDuration(soapModel.getDuration());
		model.setPrice(soapModel.getPrice());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Flight> toModels(FlightSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Flight> models = new ArrayList<Flight>(soapModels.length);

		for (FlightSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FlightModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _flightId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFlightId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _flightId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Flight.class;
	}

	@Override
	public String getModelClassName() {
		return Flight.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Flight, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Flight, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Flight, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Flight)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Flight, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Flight, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Flight)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Flight, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Flight, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Flight>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Flight.class.getClassLoader(), Flight.class, ModelWrapper.class);

		try {
			Constructor<Flight> constructor =
				(Constructor<Flight>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Flight, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Flight, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Flight, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Flight, Object>>();
		Map<String, BiConsumer<Flight, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Flight, ?>>();

		attributeGetterFunctions.put("uuid", Flight::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Flight, String>)Flight::setUuid);
		attributeGetterFunctions.put("flightId", Flight::getFlightId);
		attributeSetterBiConsumers.put(
			"flightId", (BiConsumer<Flight, Long>)Flight::setFlightId);
		attributeGetterFunctions.put("groupId", Flight::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Flight, Long>)Flight::setGroupId);
		attributeGetterFunctions.put("companyId", Flight::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Flight, Long>)Flight::setCompanyId);
		attributeGetterFunctions.put("userId", Flight::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Flight, Long>)Flight::setUserId);
		attributeGetterFunctions.put("userName", Flight::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Flight, String>)Flight::setUserName);
		attributeGetterFunctions.put("createDate", Flight::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Flight, Date>)Flight::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Flight::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Flight, Date>)Flight::setModifiedDate);
		attributeGetterFunctions.put("departureDate", Flight::getDepartureDate);
		attributeSetterBiConsumers.put(
			"departureDate",
			(BiConsumer<Flight, String>)Flight::setDepartureDate);
		attributeGetterFunctions.put("arrivalDate", Flight::getArrivalDate);
		attributeSetterBiConsumers.put(
			"arrivalDate", (BiConsumer<Flight, String>)Flight::setArrivalDate);
		attributeGetterFunctions.put("departureTime", Flight::getDepartureTime);
		attributeSetterBiConsumers.put(
			"departureTime",
			(BiConsumer<Flight, String>)Flight::setDepartureTime);
		attributeGetterFunctions.put("arrivalTime", Flight::getArrivalTime);
		attributeSetterBiConsumers.put(
			"arrivalTime", (BiConsumer<Flight, String>)Flight::setArrivalTime);
		attributeGetterFunctions.put(
			"departureAirport", Flight::getDepartureAirport);
		attributeSetterBiConsumers.put(
			"departureAirport",
			(BiConsumer<Flight, String>)Flight::setDepartureAirport);
		attributeGetterFunctions.put(
			"arrivalAirport", Flight::getArrivalAirport);
		attributeSetterBiConsumers.put(
			"arrivalAirport",
			(BiConsumer<Flight, String>)Flight::setArrivalAirport);
		attributeGetterFunctions.put(
			"availablePlaces", Flight::getAvailablePlaces);
		attributeSetterBiConsumers.put(
			"availablePlaces",
			(BiConsumer<Flight, String>)Flight::setAvailablePlaces);
		attributeGetterFunctions.put("totalPlaces", Flight::getTotalPlaces);
		attributeSetterBiConsumers.put(
			"totalPlaces", (BiConsumer<Flight, String>)Flight::setTotalPlaces);
		attributeGetterFunctions.put("duration", Flight::getDuration);
		attributeSetterBiConsumers.put(
			"duration", (BiConsumer<Flight, String>)Flight::setDuration);
		attributeGetterFunctions.put("price", Flight::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<Flight, String>)Flight::setPrice);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getFlightId() {
		return _flightId;
	}

	@Override
	public void setFlightId(long flightId) {
		_columnBitmask = -1L;

		_flightId = flightId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getDepartureDate() {
		if (_departureDate == null) {
			return "";
		}
		else {
			return _departureDate;
		}
	}

	@Override
	public void setDepartureDate(String departureDate) {
		_columnBitmask |= DEPARTUREDATE_COLUMN_BITMASK;

		if (_originalDepartureDate == null) {
			_originalDepartureDate = _departureDate;
		}

		_departureDate = departureDate;
	}

	public String getOriginalDepartureDate() {
		return GetterUtil.getString(_originalDepartureDate);
	}

	@JSON
	@Override
	public String getArrivalDate() {
		if (_arrivalDate == null) {
			return "";
		}
		else {
			return _arrivalDate;
		}
	}

	@Override
	public void setArrivalDate(String arrivalDate) {
		_arrivalDate = arrivalDate;
	}

	@JSON
	@Override
	public String getDepartureTime() {
		if (_departureTime == null) {
			return "";
		}
		else {
			return _departureTime;
		}
	}

	@Override
	public void setDepartureTime(String departureTime) {
		_departureTime = departureTime;
	}

	@JSON
	@Override
	public String getArrivalTime() {
		if (_arrivalTime == null) {
			return "";
		}
		else {
			return _arrivalTime;
		}
	}

	@Override
	public void setArrivalTime(String arrivalTime) {
		_arrivalTime = arrivalTime;
	}

	@JSON
	@Override
	public String getDepartureAirport() {
		if (_departureAirport == null) {
			return "";
		}
		else {
			return _departureAirport;
		}
	}

	@Override
	public void setDepartureAirport(String departureAirport) {
		_columnBitmask |= DEPARTUREAIRPORT_COLUMN_BITMASK;

		if (_originalDepartureAirport == null) {
			_originalDepartureAirport = _departureAirport;
		}

		_departureAirport = departureAirport;
	}

	public String getOriginalDepartureAirport() {
		return GetterUtil.getString(_originalDepartureAirport);
	}

	@JSON
	@Override
	public String getArrivalAirport() {
		if (_arrivalAirport == null) {
			return "";
		}
		else {
			return _arrivalAirport;
		}
	}

	@Override
	public void setArrivalAirport(String arrivalAirport) {
		_columnBitmask |= ARRIVALAIRPORT_COLUMN_BITMASK;

		if (_originalArrivalAirport == null) {
			_originalArrivalAirport = _arrivalAirport;
		}

		_arrivalAirport = arrivalAirport;
	}

	public String getOriginalArrivalAirport() {
		return GetterUtil.getString(_originalArrivalAirport);
	}

	@JSON
	@Override
	public String getAvailablePlaces() {
		if (_availablePlaces == null) {
			return "";
		}
		else {
			return _availablePlaces;
		}
	}

	@Override
	public void setAvailablePlaces(String availablePlaces) {
		_availablePlaces = availablePlaces;
	}

	@JSON
	@Override
	public String getTotalPlaces() {
		if (_totalPlaces == null) {
			return "";
		}
		else {
			return _totalPlaces;
		}
	}

	@Override
	public void setTotalPlaces(String totalPlaces) {
		_totalPlaces = totalPlaces;
	}

	@JSON
	@Override
	public String getDuration() {
		if (_duration == null) {
			return "";
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		_duration = duration;
	}

	@JSON
	@Override
	public String getPrice() {
		if (_price == null) {
			return "";
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Flight.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Flight.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Flight toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Flight>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FlightImpl flightImpl = new FlightImpl();

		flightImpl.setUuid(getUuid());
		flightImpl.setFlightId(getFlightId());
		flightImpl.setGroupId(getGroupId());
		flightImpl.setCompanyId(getCompanyId());
		flightImpl.setUserId(getUserId());
		flightImpl.setUserName(getUserName());
		flightImpl.setCreateDate(getCreateDate());
		flightImpl.setModifiedDate(getModifiedDate());
		flightImpl.setDepartureDate(getDepartureDate());
		flightImpl.setArrivalDate(getArrivalDate());
		flightImpl.setDepartureTime(getDepartureTime());
		flightImpl.setArrivalTime(getArrivalTime());
		flightImpl.setDepartureAirport(getDepartureAirport());
		flightImpl.setArrivalAirport(getArrivalAirport());
		flightImpl.setAvailablePlaces(getAvailablePlaces());
		flightImpl.setTotalPlaces(getTotalPlaces());
		flightImpl.setDuration(getDuration());
		flightImpl.setPrice(getPrice());

		flightImpl.resetOriginalValues();

		return flightImpl;
	}

	@Override
	public int compareTo(Flight flight) {
		int value = 0;

		if (getFlightId() < flight.getFlightId()) {
			value = -1;
		}
		else if (getFlightId() > flight.getFlightId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Flight)) {
			return false;
		}

		Flight flight = (Flight)obj;

		long primaryKey = flight.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		FlightModelImpl flightModelImpl = this;

		flightModelImpl._originalUuid = flightModelImpl._uuid;

		flightModelImpl._originalGroupId = flightModelImpl._groupId;

		flightModelImpl._setOriginalGroupId = false;

		flightModelImpl._originalCompanyId = flightModelImpl._companyId;

		flightModelImpl._setOriginalCompanyId = false;

		flightModelImpl._setModifiedDate = false;

		flightModelImpl._originalDepartureDate = flightModelImpl._departureDate;

		flightModelImpl._originalDepartureAirport =
			flightModelImpl._departureAirport;

		flightModelImpl._originalArrivalAirport =
			flightModelImpl._arrivalAirport;

		flightModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Flight> toCacheModel() {
		FlightCacheModel flightCacheModel = new FlightCacheModel();

		flightCacheModel.uuid = getUuid();

		String uuid = flightCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			flightCacheModel.uuid = null;
		}

		flightCacheModel.flightId = getFlightId();

		flightCacheModel.groupId = getGroupId();

		flightCacheModel.companyId = getCompanyId();

		flightCacheModel.userId = getUserId();

		flightCacheModel.userName = getUserName();

		String userName = flightCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			flightCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			flightCacheModel.createDate = createDate.getTime();
		}
		else {
			flightCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			flightCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			flightCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		flightCacheModel.departureDate = getDepartureDate();

		String departureDate = flightCacheModel.departureDate;

		if ((departureDate != null) && (departureDate.length() == 0)) {
			flightCacheModel.departureDate = null;
		}

		flightCacheModel.arrivalDate = getArrivalDate();

		String arrivalDate = flightCacheModel.arrivalDate;

		if ((arrivalDate != null) && (arrivalDate.length() == 0)) {
			flightCacheModel.arrivalDate = null;
		}

		flightCacheModel.departureTime = getDepartureTime();

		String departureTime = flightCacheModel.departureTime;

		if ((departureTime != null) && (departureTime.length() == 0)) {
			flightCacheModel.departureTime = null;
		}

		flightCacheModel.arrivalTime = getArrivalTime();

		String arrivalTime = flightCacheModel.arrivalTime;

		if ((arrivalTime != null) && (arrivalTime.length() == 0)) {
			flightCacheModel.arrivalTime = null;
		}

		flightCacheModel.departureAirport = getDepartureAirport();

		String departureAirport = flightCacheModel.departureAirport;

		if ((departureAirport != null) && (departureAirport.length() == 0)) {
			flightCacheModel.departureAirport = null;
		}

		flightCacheModel.arrivalAirport = getArrivalAirport();

		String arrivalAirport = flightCacheModel.arrivalAirport;

		if ((arrivalAirport != null) && (arrivalAirport.length() == 0)) {
			flightCacheModel.arrivalAirport = null;
		}

		flightCacheModel.availablePlaces = getAvailablePlaces();

		String availablePlaces = flightCacheModel.availablePlaces;

		if ((availablePlaces != null) && (availablePlaces.length() == 0)) {
			flightCacheModel.availablePlaces = null;
		}

		flightCacheModel.totalPlaces = getTotalPlaces();

		String totalPlaces = flightCacheModel.totalPlaces;

		if ((totalPlaces != null) && (totalPlaces.length() == 0)) {
			flightCacheModel.totalPlaces = null;
		}

		flightCacheModel.duration = getDuration();

		String duration = flightCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			flightCacheModel.duration = null;
		}

		flightCacheModel.price = getPrice();

		String price = flightCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			flightCacheModel.price = null;
		}

		return flightCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Flight, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Flight, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Flight, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Flight)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Flight, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Flight, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Flight, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Flight)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Flight>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _flightId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _departureDate;
	private String _originalDepartureDate;
	private String _arrivalDate;
	private String _departureTime;
	private String _arrivalTime;
	private String _departureAirport;
	private String _originalDepartureAirport;
	private String _arrivalAirport;
	private String _originalArrivalAirport;
	private String _availablePlaces;
	private String _totalPlaces;
	private String _duration;
	private String _price;
	private long _columnBitmask;
	private Flight _escapedModel;

}